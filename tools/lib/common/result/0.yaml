kind: Namespace
apiVersion: v1
metadata:
  name : helm-common-lib
  names:
    name   : {{ include "common.names.name" . }}
    chart  : {{ include "common.names.chart" . }}
    fn     : {{ include "common.names.fullname" . }}
    dep.fn : {{ include "common.names.dependency.fullname" (dict "chartName" "redis" "chartValues" .Values.redis "context" $) }}
    ns     : {{ include "common.names.namespace" . }}
    fns    : {{ include "common.names.fullname.namespace" . }}

  labels.standard: 
    {{- include "common.labels.standard" . | nindent 4 }}
    
  labels.matchLabels: 
    {{- include "common.labels.matchLabels" . | nindent 4 }}
    
  resources.preset:
    {{- include "common.resources.preset" (dict "type" "nano") | nindent 4 }}
  
  affinities.nodes.soft:
    {{- include "common.affinities.nodes.soft" (dict "key" "FOO" "values" (list "BAR" "BAZ")) | nindent 4 }}
  
  affinities.nodes.hard:
    {{- include "common.affinities.nodes.hard" (dict "key" "FOO" "values" (list "BAR" "BAZ")) | nindent 4 }}
  
  affinities.nodes:
    {{- include "common.affinities.nodes" (dict "type" "soft" "key" "FOO" "values" (list "BAR" "BAZ")) | nindent 4 }}
  
  affinities.topologyKey:
    {{ include "common.affinities.topologyKey" (dict "topologyKey" "BAR") -}} : value

  # affinities.pods.soft:
  {{/*
    {{ include "common.affinities.pods.soft" (dict "component" "FOO" "customLabels" .Values.podLabels "extraMatchLabels" .Values.extraMatchLabels "topologyKey" "BAR" "extraPodAffinityTerms" .Values.extraPodAffinityTerms "extraNamespaces" (list "namespace1" "namespace2") "context" $) -}}
  */}}
  
  # affinities.pods.hard:
  {{/*
    {{ include "common.affinities.pods.hard" (dict "component" "FOO" "customLabels" .Values.podLabels "extraMatchLabels" .Values.extraMatchLabels "topologyKey" "BAR" "extraPodAffinityTerms" .Values.extraPodAffinityTerms "extraNamespaces" (list "namespace1" "namespace2") "context" $) -}}
  */}}
  
  # affinities.pods:
  {{/*
    {{ include "common.affinities.pods" (dict "type" "soft" "key" "FOO" "values" (list "BAR" "BAZ")) -}}
  */}}

  capabilities:
    kubeVersion: {{ include "common.capabilities.kubeVersion" . }}
    apiVersions.has: # {{/* include "common.capabilities.apiVersions.has" . */}}
    policy.apiVersion: {{ include "common.capabilities.policy.apiVersion" . }}
    networkPolicy.apiVersion: {{ include "common.capabilities.networkPolicy.apiVersion" . }}
    job.apiVersion: {{ include "common.capabilities.job.apiVersion" . }}
    cronjob.apiVersion: {{ include "common.capabilities.cronjob.apiVersion" . }}
    daemonset.apiVersion: {{ include "common.capabilities.daemonset.apiVersion" . }}
    deployment.apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
    statefulset.apiVersion: {{ include "common.capabilities.statefulset.apiVersion" . }}
    ingress.apiVersion: {{ include "common.capabilities.ingress.apiVersion" . }}
    rbac.apiVersion: {{ include "common.capabilities.rbac.apiVersion" . }}
    crd.apiVersion: {{ include "common.capabilities.crd.apiVersion" . }}
    apiService.apiVersion: {{ include "common.capabilities.apiService.apiVersion" . }}
    hpa.apiVersion: # {{/* include "common.capabilities.hpa.apiVersion" . */}}
    vpa.apiVersion: # {{/* include "common.capabilities.vpa.apiVersion" . */}}
    psp.supported: {{ include "common.capabilities.psp.supported" . }} # false
    admissionConfiguration.supported: {{ include "common.capabilities.admissionConfiguration.supported" . }} # false
    admissionConfiguration.apiVersion: {{ include "common.capabilities.admissionConfiguration.apiVersion" . }} # false
    podSecurityConfiguration.apiVersion: {{ include "common.capabilities.podSecurityConfiguration.apiVersion" . }} # false
    supportsHelmVersion: {{ include "common.capabilities.supportsHelmVersion" . }} # false
  
  compatibility:
    isOpenshift: {{ include "common.compatibility.isOpenshift" . -}} # false
    renderSecurityContext: # not worked
      {{/*- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.containerSecurityContext "context" $) -*/}}

  images:
    image: {{ include "common.images.image" ( dict "imageRoot" .Values.image "global" .Values.global "chart" .Chart ) }}
    pullSecrets: {{ include "common.images.pullSecrets" ( dict "images" (list .Values.image) "global" .Values.global) }} # not work
    renderPullSecrets: {{ include "common.images.renderPullSecrets" ( dict "images" (list .Values.image) "context" $) }} # not work
    version: {{ include "common.images.version" ( dict "imageRoot" .Values.image "chart" .Chart ) }}

  ingress:
    backend:
      {{- include "common.ingress.backend" (dict "serviceName" "backendName" "servicePort" "backendPort" "context" $) | nindent 6 }}
    supportsPathType: {{ include "common.ingress.supportsPathType" . }}
    supportsIngressClassname: {{ include "common.ingress.supportsIngressClassname" . }}
    certManagerRequest: {{ include "common.ingress.certManagerRequest" ( dict "annotations" .Values.ingress.annotations ) }} # false ?
  
  storage:
    class: {{/* include "common.storage.class" ( dict "persistence" .Values.path.to.the.persistence "global" $) */}} # nw

  secrets:
    # if empty then generate else value
    name: {{ include "common.secrets.name" (dict "existingSecret" .Values.lib.existingSecret "defaultNameSuffix" "mySuffix" "context" $) }}
    key: {{ include "common.secrets.key" (dict "existingSecret" .Values.lib.existingSecret "key" "keyName") }}
    passwords.manage: {{ include "common.secrets.passwords.manage" (dict "secret" "secret-name" "key" "keyName" "providedValues" (list "lib.password1" "lib.password2") "length" 10 "strong" false "chartName" "chartName" "honorProvidedValues" false "context" $) }}
    lookup: {{ include "common.secrets.lookup" (dict "secret" "secret-name" "key" "keyName" "defaultValue" .Values.myValue "context" $) }} # ?
    exists: {{ include "common.secrets.exists" (dict "secret" "secret-name" "context" $) }} # ?

  tpl.values:
    render1: {{ include "common.tplvalues.render" ( dict "value" .Values.lib.value1 "context" $ ) }}
    render2: {{/* include "common.tplvalues.render" ( dict "value" .Values.lib.value2  "context" $ "scope" $app ) */}} #$app?
    merge: 
      {{- include "common.tplvalues.merge" ( dict "values" (list .Values.lib.merge1 .Values.lib.merge2) "context" $ ) | nindent 6 }}
    merge-overwrite:
      {{- include "common.tplvalues.merge-overwrite" ( dict "values" (list .Values.lib.merge1 .Values.lib.merge2) "context" $ ) | nindent 6 }}

  utils:
    secret.getvalue: {{ include "common.utils.secret.getvalue" (dict "secret" "secret-name" "field" "secret-value-field" "context" $) }}
    fieldToEnvVar: {{/* include "common.utils.fieldToEnvVar" dict "field" "my-password" */}} # nw num of params
    getValueFromKey: {{ include "common.utils.getValueFromKey" (dict "key" "lib.key" "context" $) }}
    getKeyFromList: {{ include "common.utils.getKeyFromList" (dict "keys" (list "lib.value1" "lib.key") "context" $) }} # ??
    checksumTemplate: {{ include "common.utils.checksumTemplate" (dict "path" "/configs/cfg-files.yaml" "context" $) }}

  warnings:
    # if image repo has "bitnami/"
    warnings.rollingTag: |
      {{- include "common.warnings.rollingTag" .Values.lib.image | nindent 6 }} # ?
    modifiedImages: |
      {{- include "common.warnings.modifiedImages" (dict "images" (list .Values.lib.image ) "context" $) | nindent 6 }}
    resources: |
      {{- include "common.warnings.resources" (dict "sections" (list "lib.csiProvider.provider" "lib.server" "") "context" $) | nindent 6 }}

  validations:
    values.single.empty: |
      {{- include "common.validations.values.single.empty" (dict "valueKey" "lib.password"  "context" $) | nindent 6 }}
    values.multiple.empty: |
      {{- $validateValueConf00 := (dict "valueKey" "lib.valid.value1" ) -}}
      {{- $validateValueConf01 := (dict "valueKey" "lib.valid.value2" ) -}}
      {{- include "common.validations.values.multiple.empty" (dict "required" (list $validateValueConf00 $validateValueConf01) "context" $) | nindent 6 }}

  errors:
    # if Release.IsUpgrade and errors then fail
    upgrade.passwords.empty: |
      {{- $validationError00 := include "common.validations.values.single.empty" (dict "valueKey" "lib.valid.value1" "context" $) -}}
      {{- $validationError01 := include "common.validations.values.single.empty" (dict "valueKey" "lib.valid.value2" "context" $) -}}
      {{- include "common.errors.upgrade.passwords.empty" (dict "validationErrors" (list $validationError00 $validationError01) "context" $) | nindent 6 }}

    # if image.registry: "docker.io" ok if "docker.io2" bad
    insecureImages: |
      {{- include "common.errors.insecureImages" (dict "images" (list .Values.lib.image) "context" $) | nindent 6 }}
      # not work empty (and to complicated)
